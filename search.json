[{"title":"12sd","url":"/20221117-12sd.html","content":"rrrrrrrrrrrrrrcc\nccccccccccc\nxcccccccccc\n```\ndef fib(n):\n\tif n == 1:\n\t\treturn 0\n\tif n == 2:\n\t\treturn 1\n\treturn fib(n-1) + fib(n-2)\n```"},{"title":"we3","url":"/20221117-we3.html","content":"ffffffffffffff\nfrrrrrrrrrrrrrr\n```\ndef fib(n):\n\tif n == 1:\n\t\treturn 0\n\tif n == 2:\n\t\treturn 1\n\treturn fib(n-1) + fib(n-2)\n```"},{"title":"张量扁平化——CNN的Flatten操作","url":"/20221117-张量扁平化——CNN的Flatten操作.html","content":"张量扁平化操作是卷积神经网络中的一个常见操作。这是因为在全连接层接受输入之前，传递给全连接层的卷积层输出必须被扁平化。我们了解到卷积神经网络的张量输入通常有4个轴，一个用于批处理大小，一个用于颜色通道，还有一个用于高度和宽度\n\n即：(批量大小、通道、高度、宽度）\n\n\n\n图片\n\n\n\n那么现在我们以一张图片为例，看看如何将它扁平化\n\n\n\n图片\n\n\n\n \n\n这是一张彩色图片，也就是有r,g,b共三个通道，大小为128*128，按照上面的表示方法，我们可以将它表示为\n\n\n\n[1,3,128,128]\n\n\n\ncode：\n\n图片\n\n\n\n好吧，可是看到，张量已经被拉平了，达到了我们预期的目的。\n\n\n\n但是，这仅仅是一张图片，如果是二张图片呢？\n\n\n\n\n\n图片\n\n\n\n(假设仍按上述方法)\n\n\n\ncode：\n\n图片\n\n \n\n好吧，结果并不好，因为我们需要对批处理张量中的每个图像进行单独的预测，因此扁平化的批次在我们的CNN中无法很好地起作用，所以现在我们一团糟。\n\n\n\n解决方案是在保持batch 轴不变的情况下使每个图像变平。这意味着我们只想拉平张量的一部分。我们要使用高度和宽度轴和颜色通道轴展平。也就是展平(C,H,W)。\n\n\n\n假设我们有输入5张彩色的图片（也就是5张为一个batch），\n\ncode：\n\n图片\n\n\n\n结果十分符合我们所期望的。\n\n所以flatten(start_dim=1)是个较为不错的展平方法。\n\n\n\n\n\n总结：\n\n现在，我们应该对张量的展平操作有了一个很好的了解。我们知道如何展平整个张量，并且我们知道展平特定张量尺寸/轴,我们将在构建CNN时看到将其投入使用。\n\n{% note flat %}\n默認 提示塊標籤\n{% endnote %}\n\n{% note default flat %}\ndefault 提示塊標籤\n{% endnote %}\n\n{% note primary flat %}\nprimary 提示塊標籤\n{% endnote %}\n\n{% note success flat %}\nsuccess 提示塊標籤\n{% endnote %}\n\n{% note info flat %}\ninfo 提示塊標籤\n{% endnote %}\n\n{% note warning flat %}\nwarning 提示塊標籤\n{% endnote %}\n\n{% note danger flat %}\ndanger 提示塊標籤\n{% endnote %}\n\n\n{% note success no-icon %}\n```\ndef fib(n):\n\tif n == 1:\n\t\treturn 0\n\tif n == 2:\n\t\treturn 1\n\treturn fib(n-1) + fib(n-2)\n```\n{% endnote %}\n{% note blue 'fas fa-bullhorn' simple %}\n2021年快到了....\n{% endnote %}\n{% note pink 'fas fa-car-crash' simple %}\n小心開車 安全至上\n{% endnote %}\n{% note red 'fas fa-fan' simple%}\n這是三片呢？還是四片？\n{% endnote %}\n{% note orange 'fas fa-battery-half' simple %}\n你是刷 Visa 還是 UnionPay\n{% endnote %}\n{% note purple 'far fa-hand-scissors' simple %}\n剪刀石頭布\n{% endnote %}\n{% note green 'fab fa-internet-explorer' simple %}\n前端最討厭的瀏覽器\n{% endnote %}\n\n\n","tags":["深度学习"]},{"title":"cfg","url":"/20221113-cfg.html"},{"title":"我的博客","url":"/20221020-c2.html","content":"this is my blog","tags":["doc"]},{"title":"月明","url":"/20220727-f5.html","content":"# 一级标题\n\n代码测试：\n\\```py\nprint(\"Hello\")\n\\```\n\n注意：这里因为我放在md文件中的，所以加上了\\，不解析```，实际测试时请去掉\\。\n\n图片测试：\n\n\n引用测试：\n\n>这是一条引用\n\n## 二级标题\n\n无序列表测试：\n\n- 哈哈\n- 嘿嘿\n- 吼吼\n\n### 三级标题\n\n#### 四级标题\n","tags":["doc"]},{"title":"第二个博客","url":"/20220727-first.html","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["second"]},{"title":"Hello World","url":"/20220727-hello-world.html","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]